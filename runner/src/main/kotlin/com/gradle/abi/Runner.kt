/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
@file:OptIn(ExperimentalBuildToolsApi::class)

package com.gradle.abi

import org.jetbrains.kotlin.buildtools.api.CompilationService
import org.jetbrains.kotlin.buildtools.api.ExperimentalBuildToolsApi
import org.jetbrains.kotlin.buildtools.api.jvm.AccessibleClassSnapshot
import org.jetbrains.kotlin.buildtools.api.jvm.ClassSnapshot
import org.jetbrains.kotlin.buildtools.api.jvm.ClassSnapshotGranularity
import java.io.File

class Snapshotter {
    val compilationService = CompilationService.loadImplementation(Snapshotter::class.java.classLoader)

    fun snapshot(jar: String): Map<String, ClassSnapshot> {
        val classSnapshots = compilationService.calculateClasspathSnapshot(
            File(jar),
            ClassSnapshotGranularity.CLASS_LEVEL
        ).classSnapshots
        return classSnapshots
    }
}

fun main() {
    val snapshotter = Snapshotter()

    snapshotter.snapshot("../target/build/classes/kotlin/main").forEach {
        if (it.value is AccessibleClassSnapshot) {
            println("ABI fingerprint of ${it.key} is: ${(it.value as AccessibleClassSnapshot).classAbiHash}")
        } else {
            println("ABI fingerprint of ${it.key} is: INACCESSIBLE")
        }
    }

    print("Calling the function yields: ")
    InlineLambda().foo()
}